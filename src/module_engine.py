"""
module_engine.py

Core module for GPTARS responsible for:
- Predicting user intents and determining required modules.
- Executing tool-specific functions like web searches and vision analysis.

This is achieved using a pre-trained Naive Bayes classifier and TF-IDF vectorizer.
"""

# === Standard Libraries ===
import joblib 
from datetime import datetime

# === Custom Modules ===
from module_websearch import search_google, search_google_news
from module_vision import describe_camera_view

# === Constants and Globals ===
# Pre-trained Models
MODEL_FILENAME = 'engine/pickles/naive_bayes_model.pkl'
VECTORIZER_FILENAME = 'engine/pickles/tfidf_vectorizer.pkl'

# Load the Naive Bayes classifier and TF-IDF vectorizer
nb_classifier = joblib.load(MODEL_FILENAME)
tfidf_vectorizer = joblib.load(VECTORIZER_FILENAME)

def predict_class(user_input):
    """
    Predicts the class and its confidence score for a given user input.

    Parameters:
    - user_input (str): The input text from the user.

    Returns:
    - tuple: Predicted class and its probability score.
    """
    query_vector = tfidf_vectorizer.transform([user_input])
    predictions = nb_classifier.predict(query_vector)
    predicted_probabilities = nb_classifier.predict_proba(query_vector)

    # Get the predicted class and its corresponding probability
    predicted_class = predictions[0]
    max_probability = max(predicted_probabilities[0])
    formatted_percentage = f"{max_probability * 100:.1f}%"
    #print(max_probability)
    #print(predicted_class)

    # print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] TOOL: {predicted_class} @ {formatted_percentage}")

    # Return the predicted class and its probability
    if max_probability < 0.75:
        return None, max_probability
    return predicted_class, max_probability

def check_for_module(user_input):
    """
    Determines the appropriate module to handle the user's input based on predictions.

    Parameters:
    - user_input (str): The input text from the user.

    Returns:
    - str: A response generated by the determined module or a default message if no module is needed.
    """
    predicted_class, probability = predict_class(user_input)

    if "search google" in user_input:
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] TOOL: Forced Search")
        predicted_class = "Search"

    if predicted_class:
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] INFO: Predicted Class: {predicted_class}")
        print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] INFO: Probability: {probability}")

        # Module logic based on prediction
        if predicted_class == "Weather":
            # print(f"Weather MODULE")
            weather_info = search_google(user_input)
            module_engine = f"*Using tool Web Search* Use the following results from a realtime web search: {weather_info}"

        elif predicted_class == "News":
            # print(f"News MODULE")
            result = search_google_news(user_input)
            module_engine = f"*Using tool Web Search* Summarize the news from the following web search results: {result}"

        elif predicted_class == "Vision":
            # print(f"Vision MODULE")
            result = describe_camera_view()
            module_engine = f"*Using tool Vision* The following is a summary of what TARS can see: {result}"
            print(result)

        elif predicted_class == "Search":
            # print(f"Search MODULE")
            result = search_google(user_input)
            module_engine = f"*Using tool Web Search* Use this answer from Google to respond to the user: {result}"
            print(module_engine)

        elif predicted_class == "goodbye":
            # print(f"Goodbye MODULE")
            module_engine = "*User is leaving the chat politely*"

    else:
        module_engine = "No_Tool"
        # print(f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] INFO: No module needed. Maximum probability: {probability}")

    return module_engine